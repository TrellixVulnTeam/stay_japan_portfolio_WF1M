{"version":3,"sources":["libs/scroll.js"],"names":["ScrollObserver","constructor","els","cb","options","document","querySelectorAll","defaultOptions","root","rootMargin","threshold","once","Object","assign","_init","callback","entries","observer","forEach","entry","isIntersecting","target","unobserve","io","IntersectionObserver","bind","POLL_INTERVAL","el","observe","destroy","disconnect"],"mappings":"AAAA,MAAMA,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,GAAD,EAAMC,EAAN,EAAUC,OAAV,EAAmB;AAC1B,SAAKF,GAAL,GAAWG,QAAQ,CAACC,gBAAT,CAA0BJ,GAA1B,CAAX;AACA,UAAMK,cAAc,GAAG;AACnBC,MAAAA,IAAI,EAAE,IADa;AAEnBC,MAAAA,UAAU,EAAE,KAFO;AAGnBC,MAAAA,SAAS,EAAE,CAHQ;AAInBC,MAAAA,IAAI,EAAE;AAJa,KAAvB;AAMA,SAAKR,EAAL,GAAUA,EAAV;AACA,SAAKC,OAAL,GAAeQ,MAAM,CAACC,MAAP,CAAcN,cAAd,EAA8BH,OAA9B,CAAf;AACA,SAAKO,IAAL,GAAY,KAAKP,OAAL,CAAaO,IAAzB;;AACA,SAAKG,KAAL;AACH;;AACDA,EAAAA,KAAK,GAAG;AACJ,UAAMC,QAAQ,GAAG,UAAUC,OAAV,EAAmBC,QAAnB,EAA6B;AAC1CD,MAAAA,OAAO,CAACE,OAAR,CAAgBC,KAAK,IAAI;AACrB,YAAIA,KAAK,CAACC,cAAV,EAA0B;AACtB,eAAKjB,EAAL,CAAQgB,KAAK,CAACE,MAAd,EAAsB,IAAtB;;AACA,cAAG,KAAKV,IAAR,EAAc;AACVM,YAAAA,QAAQ,CAACK,SAAT,CAAmBH,KAAK,CAACE,MAAzB;AACH;AACJ,SALD,MAKO;AACH,eAAKlB,EAAL,CAAQgB,KAAK,CAACE,MAAd,EAAsB,KAAtB;AACH;AACJ,OATD;AAUH,KAXD;;AAaA,SAAKE,EAAL,GAAU,IAAIC,oBAAJ,CAAyBT,QAAQ,CAACU,IAAT,CAAc,IAAd,CAAzB,EAA8C,KAAKrB,OAAnD,CAAV,CAdI,CAgBJ;;AACA,SAAKmB,EAAL,CAAQG,aAAR,GAAwB,GAAxB;AAEA,SAAKxB,GAAL,CAASgB,OAAT,CAAiBS,EAAE,IAAI,KAAKJ,EAAL,CAAQK,OAAR,CAAgBD,EAAhB,CAAvB;AACH;;AAEDE,EAAAA,OAAO,GAAG;AACN,SAAKN,EAAL,CAAQO,UAAR;AACH;;AAtCgB","sourcesContent":["class ScrollObserver {\n    constructor(els, cb, options) {\n        this.els = document.querySelectorAll(els);\n        const defaultOptions = {\n            root: null,\n            rootMargin: \"0px\",\n            threshold: 0,\n            once: true\n        };\n        this.cb = cb;\n        this.options = Object.assign(defaultOptions, options);\n        this.once = this.options.once;\n        this._init();\n    }\n    _init() {\n        const callback = function (entries, observer) {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    this.cb(entry.target, true);\n                    if(this.once) {\n                        observer.unobserve(entry.target);\n                    }\n                } else {\n                    this.cb(entry.target, false);\n                }\n            });\n        };\n\n        this.io = new IntersectionObserver(callback.bind(this), this.options);\n\n        // @see https://github.com/w3c/IntersectionObserver/tree/master/polyfill\n        this.io.POLL_INTERVAL = 100;\n        \n        this.els.forEach(el => this.io.observe(el));\n    }\n\n    destroy() {\n        this.io.disconnect();\n    }\n}"],"file":"scroll.js"}